(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Help[u___]:= help[u]; 

help[]:= Module[{packages}, 
If[ListQ [$HelpContexts] \[And] Length[$HelpContexts]>0, 
packages = $HelpContexts,

Print["Warning: Help[] has been reinitialized incorrectly. Attempting recovery."];
$HelpContexts={"MathSBML`"};
packages=$HelpContexts; 
]; 
Print["To get help on a specific package type one of the following: "]; 
packages = StringReplace[#, "`"-> ""]&/@packages; 
Print["help[\""<>#<>"\"]"]&/@packages; 
]; 

help[pkg_?StringQ]:= Module[{packages, package, helpfunction}, 
If[ListQ[$HelpContexts] \[And] Length[$HelpContexts]>0, 
packages = $HelpContexts,

packages={}; 
]; 
package=pkg; 
If [StringTake[package, -1]!=   "`", package = package<>"`"]; 

If[!MemberQ[packages, package], 
Print["No help is available on ", pkg]; 
Return[help[]]; 
];

(* execute the requested help function *)

helpfunction=package<>"Private`"<>StringReplace[package, "`"-> ""]<>"help[]"; 
Return[ToExpression[helpfunction]];
 
]; 
help[pkg_]:= help[ToString[pkg]]; 
help[x___]:= (Print["Expecting Help[\"Context\"]"]; Return[$Failed]); 

(* define the local help function in the form contexthhelp[] *)

MathSBMLhelp[]:= Module[{names, usagestrings, print}, 
names=decontextify/@Names["MathSBML`*"];
usagestrings = ToExpression/@((ToString[#]<>"::usage")&/@names); 
print[a_, b_]:= Module[{}, 
StylePrint[a, "Subsection"]; 
Print[b]; 
]; 
StylePrint["MathSBML Help", "Section"]; 
Print["This is the MathSBML Help file. Please note that MathSBML is experimental software and as such many of the functions may only contain partial implementations. And like a lot of software documentation in the cybersphere it does not always keep up with the latest implementation. Please check with the developer if you have any questions."];
Print["This file was generated by MathSBML version "<>$MathSBML$Version<>" on "<>DateString[{"Day", " ", "MonthNameShort", " ", "Year", " at ", "Hour", ":", "Minute", ":", "Second", " (", "TimeZone",")"}]<>" using Mathematica "<>$Version<>" (Version "<>ToString[ $VersionNumber]<>", Release "<>ToString[ $ReleaseNumber]<> ")"];  
MapThread[print, {names, usagestrings}]; 
];



AddHelp[context_?StringQ]:= Module[{ctx, c},
ctx = context;
If[StringTake[ctx, -1]!= "`", ctx = ctx <> "`"]; 
If[MemberQ[$HelpContexts, ctx], Return[True]]; 
c=Append[$HelpContexts, ctx]; 
$HelpContexts=c; 
Return[True]; 
];
AddHelp[context_]:=AddHelp[ToString[context]]; 

ResetHelp[]:= Module[{contexts, me}, 
contexts=$HelpContexts ;
If[ToString[contexts]=="$HelpContexts", 
$HelpContexts={}, 
$HelpContexts=Flatten[{contexts}];
];
AddHelp["MathSBML`"]; 
]; 

ResetHelp[]; 



LTPrint["help loaded."];
