(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



If[$$LoadBug, Print["Loading:predefined functions"]];


mass[x___]:= Apply[Times,{x}];


uui[S_, Vm_, Km_]:= (Vm*S)/(Km+S);


uur[S_, P_, Vf_, Vr_, Kms_, Kmp_]:= (Vf(S/Kms)-Vr(P/Kmp))/(1+S/Kms+P/Kmp)


uuhr[S_,P_,Vf_,Km1_,Km2_,Keq_]:= (Vf/Km1)(S-P/Keq)/(1+S/Km1+P/Km2)


isouur[S_, P_, Vf_, Kms_, Kmp_, Kii_, Keq_]:= Vf (S-P/Keq)/(S(1+P/Kii)+Kms(1+P/Kmp))


hilli[S_, V_, K_,h_]:= V*S^h/(K^h+S^h)


hillr[S_, P_, Vf_, Shalf_, Phalf_, h_, Keq_]:= ((Vf*S/Shalf)(1-P/(S*Keq))(S/Shalf+P/Phalf)^(h-1))/(1+(S/Shalf+P/Phalf)^h);


hillmr[S_,P_, M_, S05_, P05_, M05_,Vf_, Keq_, h_, \[Alpha]_]:= Module[{K1, K2,v},
K1=((S/S05)+(P/P05))^h;
K2=(1+(M/M05)^h)/(1+\[Alpha] (M/M05)^h);
v=(Vf*S/S05)(1-P/(S *Keq))(S/S05+P/P05)^(h-1)/(K1+K2);
Return[v];];


hillmmr[S_, P_, M_,S05_, P05_, M05_, Ma_, Ma05_, Mb_, Mb05_, Vf_, Keq_, h_, a_, b_, \[Alpha]1_, \[Alpha]2_, \[Alpha]12_]:= Module[{K1, K2, v},
K1 = (S/S05 + P/P05)^h;
K2 = (1+(Ma/Ma05)^h+(Mb/Mb05)^h)/(1+\[Alpha]1 (Ma/Ma05)^h + \[Alpha]2 (Mb/Mb05)^h + \[Alpha]1*\[Alpha]2*\[Alpha]12 *(Ma/Ma05)^h * (Mb/Mb05)^h);
v = (Vf * S/S05)(1-P/(S*Keq))*(S/S05 + P/P05)^(h-1)/(K1+K2);
Return[v]; 
]


usii[S_, V_, Km_, Ki_]:= (V*S/Km)/(1+S/Km+S^2/Ki);


usir[S_, P_, Vf_, Vr_, Kms_, Kmp_, Ki_]:= (Vf*S/Kms  + Vr*P/Kmp)/(1+S/Kms + P/Kmp + S^2/Ki);


uai[S_, V_, Ksa_, Ksc_]:=V*(S/Ksa)^2/(1+S/Ksc+(S/Ksa)^2+S/Ksa);


ucii[S_,Inh_, V_,Km_, Ki_]:=(V*S/Km)/(1+S/Km+Inh/Ki);


ucir[S_,P_, Inh_, Vf_, Vr_, Kms_, Kmp_, Ki_]:= ((Vf*S/Kms)-(Vr*P/Kmp))/(1+S/Kms+P/Kmp+Inh/Ki);


unii[S_, Inh_, V_, Km_, Ki_]:= (V*S/Km)/(1+Inh/Ki+(S/Km)(1+Inh/Ki));


unir[S_, P_, Inh_, Vf_, Vr_, Kms_, Kmp_, Ki_]:= ((Vf*S/Kms)-(Vr*P/Kmp))/(1+Inh/Ki + (S/Kms+P/Kmp)(1+Inh/Ki));


uuci[S_, Inh_, V_, Km_, Ki_]:= (V*S/Km)/(1+(S/Km)(1+Inh/Ki));


uucr[S_, P_, Inh_, Vf_, Vr_, Kms_, Kmp_, Ki_]:=( (Vf*S/Kms)-(Vr*P/Kmp))/(1+(S/Kms+P/Kmp)(1+Inh/Ki));


umi[S_, Inh_, V_, Km_, Kis_, Kic_]:= (V*S/Km)/(1+Inh/Kis +(S/Km)(1+Inh/Kic));


umr[S_, P_, Inh_, Vf_, Vr_, Kms_, Kmp_, Kis_, Kic_]:= (Vf*S/Kms - Vr*P/Kmp)/(1+Inh/Kis + (S/Kms+P/Kmp)(1+Inh/Kic));


uaii[S_, Ac_, V_, Km_, Ka_]:= (V*S/Km)/(1+S/Km + Ka/Ac);


uar[S_, P_, Ac_, Vf_, Vr_, Kms_, Kmp_, Ka_]:= (Vf*S/Kms - Vr*P/Kmp)/(1+S/Kms+P/Kmp+Ka/Ac);


ucti[S_, Ac_, V_, Km_, Ka_]:= (V*S/Km)/(1+Ka/Ac + (S/Km)(1+Ka/Ac));


uctr[S_, P_, Ac_, Vf_, Vr_, Kms_, Kmp_, Ka_]:= (Vf*S/Kms - Vr*P/Kmp)/(1+Ka/Ac + (S/Kms + P/Kmp)(1+Ka/Ac));


umai[S_, Ac_, V_, Km_, Kas_, Kac_]:= (V*S/Km)/(1+Kas/Ac +( S/Km )(1+Kac/Ac))


umar[S_, P_, Ac_, Vf_, Vr_, Kms_, Kmp_, Kas_, Kac_]:= (Vf*S/Kms - Vr*P/Kmp)/(1+(Kas/Ac) + (S/Kms+P/Kmp)(1+Kac/Ac));


uhmi[S_, M_, V_, Km_, Kd_, a_, b_]:= ((V*S/Km)*(1+b*M/(a*Kd)))/(1+M/Kd + (S/Km)(1+M/(a*Kd)));


uhmr[S_, P_, M_, Vf_, Vr_, Kms_, Kmp_, Kd_, a_, b_]  := (Vf*S/Kms - Vr*P/Kmp)*(1+b*M/(a*Kd))/(1+M/Kd + (S/Kms+P/Kmp)(1+M/(a*Kd)));


ualii[S_, Inh_, V_, Ks_, Kii_, n_, L_]:= V *(S/Ks)* (1+S/Ks)^(n-1) / (L*(1+Inh/Kii)^n+(1+S/Ks)^n)


ordubr[A_, P_, Q_, Vf_, Vr_, Kma_, Kmq_, Kmp_, Kip_, Keq_]:= (Vf*(A-P*Q/Keq))/(Kma + A*(1+P/Kip) + (Vf/(Vr*Keq))(Kmq*P+Kmp*Q+P*Q))


ordbur[A_, B_, P_, Vf_, Vr_, Kma_, Kmb_, Kmp_, Kia_, Keq_]:= (Vf * (A*B - P/Keq))/ (A*B + Kma*B + Kmb*A + (Vf / (Vr*Keq))*(Kmp + P * (1+A/Kia)))


ordbbr[A_, B_, P_, Q_, Vf_, Vr_, Kma_,Kmb_,  Kmp_,Kmq_,  Kia_, Kib_, Kip_, Keq_]:= Module[{v,K1, K2}, 
K2 = Kmp * (1+Kma*B/(Kia*Kmb) +P*(1+B/Kib)); 
K1= (Vf/(Vr*Keq))(Kmq*P*(1+A/Kia)+Q*K2);
v = (Vf*(A*B - P*Q /Keq ))/(A*B*(1+P/Kip)+Kmb*(A+Kia)+Kma*B+K1);
Return[v]
];


ppbr[A_, B_, P_, Q_, Vf_, Vr_, Kma_, Kmb_, Kmp_, Kmq_, Kia_, Kiq_, Keq_]:= Module[{K1, v},

K1= (Vf /(Vr*Keq))(Kmq*P (1+A/Kia)+ Q(Kmp+P));
v = (Vf*(A*B-P*Q/Keq))/(A*B+Kmb*A + Kma*B*(1+Q/Kiq) +K1); 
Return[v];
];


LTPrint["Loaded Level 1 Pre-defined functions."]; 
