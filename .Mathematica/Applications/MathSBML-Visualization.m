(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



vis$boxWidth=.15;
vis$boxHeight=.05;
vis$box = 0.5{vis$boxWidth, vis$boxHeight};
vis$radius=0.025;
vis$fontSize=12;
vis$headerFontSize=18;
vis$fontFamily="Times"

vis$data={};
new$visdata[]:= Module[{}, vis$data={}]; 
save$visdata[data___]:= AppendTo[vis$data, {data}];
get$visdata[]:= vis$data;


visualizeSBMLModel[file_, options___?OptionQ]:=  Module[{m,opts, stuff,ids, r, s, getS, getRMP, vis,dbg=False, sbmlrules, rateRules, rateRuleVariables, assignmentRules, assignmentRuleVariables, assignmentRulesForVisualization, rateRulesForVisualization, namerules={}, byname, modelnames, ignore, v, plotlabel},

dbg = "debug"/.{options}/.{"debug"-> False}; 
new$visdata[]; 

f=stringer[file];
If[fileExists[ f],
m = Import[f,"XML"]; 
,
f=ToFileName[Directory[], f];
Print["Error: "//boldRed,"The file "//boldBlack,f//boldBlue," does not exist."//boldBlack];
Return[];
];

(* get options *)
byname =( MathSBML`visualizeByName/.{options})/.{MathSBML`visualizeByName-> False};

ignore = (MathSBML`ignoreSpecies/.{options})/.{MathSBML`ignoreSpecies-> {}};
ignore = stringer/@ignore;

vis$arrowLength= visualizationArrowLength/.{options}/.{visualizationArrowLength-> 15};

If[$VersionNumber<6, 
vis$boxWidth=visualizationBoxWidth/.{options}/.{visualizationBoxWidth-> .15};
vis$boxHeight=visualizationBoxHeight/.{options}/.{visualizationBoxHeight-> .05};
vis$radius=visualizationRadius/.{options}/.{visualizationRadius-> 0.025};
,

vis$boxWidth=visualizationBoxWidth/.{options}/.{visualizationBoxWidth-> 1};
vis$boxHeight=visualizationBoxHeight/.{options}/.{visualizationBoxHeight-> .25};
vis$radius=visualizationRadius/.{options}/.{visualizationRadius-> 0.1};

]; 

vis$box = 0.5{vis$boxWidth, vis$boxHeight};
vis$fontSize=visualizationFontSize/.{options}/.{visualizationFontSize-> 12};
vis$headerFontSize=visualizationHeaderFontSize/.{options}/.{visualizationHeaderFontSize-> 18};
vis$fontFamily=visualizationFontFamily/.{options}/.{visualizationFontFamily-> "Times"};

c=Cases[m, XMLElement["model",_,_],Infinity];
ids = getSBMLfield["id",#]&/@c;
modelnames = getSBMLfield["name",#]&/@c; 
namerules = Join[namerules, MapThread[Rule, {ids, modelnames}]];

(* get the species *)
getS[XMLElement["species", opt_, stuff_]]:= Module[{id,name},
id = "id"/.opt/.{"id"-> "error"};
name="name"/.opt/.{"name"-> "unnamed species"};
id=stringer[id];
AppendTo[namerules, id-> name];
Return[id]; 
];
getS[___]:= "error-reading-species-id";

While[ListQ[c] \[And] Length[c]>0, c=First[c]];
s=Cases[m, XMLElement["listOfSpecies",__], Infinity]; 
If[Length[s]>0, 
s=Cases[s, XMLElement["species", __], Infinity];
s=getS/@s;
]; 
If[dbg, Print["visualizeSBMLModel: s=",s]]; 
If[dbg, Print["visualizeSBMLModel: namerules=", namerules]];
(* get the rules *)

assignmentRules = {};
assignmentRuleVariables={};
assignmentRulesForVisualization={};
rateRules = {};
rateRuleVariables={}; 
rateRulesForVisualization={};

r = Cases[m, XMLElement["listOfRules", __], Infinity];
If[Length[r]>0, 

assignmentRules = Cases[r, XMLElement["assignmentRule", __], Infinity]; 
rateRules = Cases[r, XMLElement["rateRule", __], Infinity]; 

If[Length[assignmentRules] >0 \[Or] Length[rateRules]>0, 
If[dbg, Print[Length[assignmentRules], " assignment rules"]]; 
Block[{v,vv, rhsvars},

rhsvars[u_]:= Module[{m,v,vid},
vid["ci",{},{sid_}]:= {sid};
vid[sid___]:= {}; 
m=Cases[u, XMLElement["math",__], Infinity];
v= Cases[m,XMLElement["ci",__], Infinity];
v = v/.{XMLElement-> vid};
v = Flatten[v];
Return[v];
];

If[Length[assignmentRules]>0, 
(* put assignment rules into a form that can be used to traverse kinetic laws of reactions for hidden modifiers *)

v = getSBMLfield["variable",#]&/@assignmentRules;
assignmentRuleVariables=v;
vv=rhsvars/@assignmentRules;
vv = Intersection[#, s]&/@vv;
assignmentRules = MapThread[Rule, {v, vv}];
If[dbg, Print["visualizeSBMLModel: v=",v]];
If[dbg, Print["visualizeSBMLModel: vv (species):",vv]];
If[dbg, Print["visualizeSBMLModel: assignmentRules (species dependence):",assignmentRules]]; 

(* for visualization of rules, select only pieces that affect species *)

Block[{prepRuleForVisualization},
prepRuleForVisualization[{variable_, {input___}}]:=Rule[#,variable]&/@{input};
assignmentRulesForVisualization = prepRuleForVisualization/@(assignmentRules/.{Rule-> List});
assignmentRulesForVisualization=Flatten[assignmentRulesForVisualization];
assignmentRulesForVisualization= Select[assignmentRulesForVisualization,
And[MemberQ[s, First[#]],MemberQ[s, Last[#]]]& 
];
If[dbg,Print["visualizeSBMLModel: assignmentRulesForVisualization:",assignmentRulesForVisualization ]];
]; (* end Block *)
]; (* end If[Length[assignmentRules]>0 *)


If[Length[rateRules]>0, 
(* put rateRules into a form that can be used to traverse kinetic laws of reactions for hidden modifiers *)

v = getSBMLfield["variable",#]&/@rateRules;
rateRuleVariables=v;
vv=rhsvars/@rateRules;
vv = Intersection[#, s]&/@vv;
rateRules = MapThread[Rule, {v, vv}];

If[dbg, Print["visualizeSBMLModel: rate v=",v]];
If[dbg, Print["visualizeSBMLModel: rate vv (species):",vv]];
If[dbg, Print["visualizeSBMLModel: rateRules (species dependence):",rateRules]]; 

(* for visualization of rules, select only pieces that affect species *)

Block[{prepRuleForVisualization},
prepRuleForVisualization[{variable_, {input___}}]:=Rule[#,variable]&/@{input};
rateRulesForVisualization = prepRuleForVisualization/@(rateRules/.{Rule-> List});
rateRulesForVisualization=Flatten[rateRulesForVisualization];
rateRulesForVisualization= Select[rateRulesForVisualization,
And[MemberQ[s, First[#]],MemberQ[s, Last[#]]]& 
];
If[dbg,Print["visualizeSBMLModel:rateRulesForVisualization:",rateRulesForVisualization ]];
]; (* end Block *)
]; (* end If[Length[rateRule s]>0 *)

]; (* end Block *)
]; (* end if there are rules *)
 (* else no rules *) 
(* no else clause right now *)
];
 

(* get the reactions *)

getRMP[XMLElement["reaction",opt_, stuff_]]:= 
Module[{r, m,rm, p,rmp,  reaction, getR, getM, getP, id, rule, dbg=False, kl,klarv,klrrv, vid,name}, 
vid["ci",{},{sid_}]:= {sid};
vid[sid___]:= {}; 

reaction=XMLElement["reaction",opt, stuff];
id="id"/.opt/.{"id"-> "unknown-reaction-id"};
id="$"<>id;
name = "name"/.opt/.{"name"-> "unnamed reaction"};
AppendTo[namerules, id->  name];

If[dbg, Print["**** getRMP: id: ", id]]; 

rule[a_, b_]:= {Rule[a,id], Rule[id, b]};

r=Cases[reaction, XMLElement["listOfReactants",___], Infinity];
r=Cases[r, XMLElement["speciesReference",___], Infinity];
r=getSBMLfield["species",#]&/@r;

m=Cases[reaction, XMLElement["listOfModifiers",___], Infinity];
m=Cases[m, XMLElement["modifierSpeciesReference",___], Infinity];
m=getSBMLfield["species",#]&/@m;

p=Cases[reaction, XMLElement["listOfProducts",___], Infinity];
p=Cases[p, XMLElement["speciesReference",___] , Infinity];
p=getSBMLfield["species",#]&/@p;

kl = Cases[reaction, XMLElement["math",___], Infinity];
kl = Cases[kl, XMLElement["ci", ___], Infinity]; 
kl = kl/.{XMLElement-> vid};
kl = Flatten[kl];
If[dbg, Print["getRMP: kl:", kl]]; 
klarv = Intersection[kl, assignmentRuleVariables];
klrrv = Intersection[kl, rateRuleVariables];
If[dbg, Print["getRMP: klarv:", klarv]];
If[dbg, Print["getRMP: klrrv:", klrrv]];

klarv = Join[klarv, klrrv];
If[dbg, Print["getRMP: klarv:", klarv]];

klarv = klarv//.Join[assignmentRules, rateRules];
klarv = Flatten[klarv];
If[dbg, Print["getRMP: klarv (hidden species):", klarv]];

rm=Join[r,m, klarv];
If[dbg, Print["getRMP: r: ", r]]; 
If[dbg, Print["getRMP: m: ", m]]; 
If[dbg, Print["getRMP: p: ", p]]; 

If[dbg, Print["getRMP: rm: ", rm]]; 
(* rmp= Outer[Rule, rm, p];
rmp=rmp/.{Rule-> rule}; 
rmp=Flatten[rmp];
If[dbg, Print["getRMP: rmp: ", rmp]]; 
*)
Block[{ri, ro},
ri = Rule[#, id]&/@rm;
rm = Rule[id, #]&/@p;
rmp = Join[ri, rm]//Flatten;
];
If[dbg, Print["getRMP: rmp: ", rmp]]; 


Return[rmp];
]; 
getRMP[___]:="error-reading-reaction";

r=Cases[m, XMLElement["listOfReactions", __], Infinity];
If[Length[r]>0, 
r=Cases[r, XMLElement["reaction",___], Infinity];
r=getRMP/@r;
If[dbg, Print["visualizeSBMLModel: next reaction=",#]&/@r]; 
]; 
r=Join[r, assignmentRulesForVisualization, rateRulesForVisualization]; 
r=Flatten[r];

If[Length[r]<1,
Print["Warning: "//boldRed, "This model can not be visualized becauese it does not contain any reactions or rules that define species in terms of other species."//boldBlack];

If[$VersionNumber<6, 
Return[Show[Graphics[Text["*************\nModel cannot \nbe visualized\n*************", {0,0}]], Frame-> True, FrameTicks-> None, Background-> Yellow, TextStyle-> {FontSize-> 22, FontFamily-> Arial}, 
FrameLabel->{None,None,  MyStyleForm[ids[[1]], FontFamily-> vis$fontFamily, FontSize-> vis$headerFontSize],None}]] ,
Return[Show[Graphics[Text["*************\nModel cannot \nbe visualized\n*************", {0,0}]], Frame-> True, FrameTicks-> None, Background-> Yellow, LabelStyle-> {FontSize-> 22, FontFamily-> Arial}, 
FrameLabel->{None,None,  MyStyleForm[ids[[1]], FontFamily-> vis$fontFamily, FontSize-> vis$headerFontSize],None}]]
]
]; 

(* filter out species listed in ignoreSpecies *)
Block[{keep,reactions},
reactions = List@@#&/@r;
keep[{a_, b_}]:= Not[MemberQ[ignore, a] ]\[And] Not[MemberQ[ignore, b]];
reactions = Select[reactions, keep];
reactions = Rule@@#&/@reactions;
r= reactions;
];

If[byname, r =( r/.namerules)]; 
If[dbg, Print["visualizeSBMLModel: r=",r]]; 

(* visualize *)

vis[m_]:=Module[{v,xy, esf, vsf, title,opt},

title  = ids[[1]]; 
If[byname, title  = title/.namerules]; 
v=VertexList[m];
xy=GraphCoordinates[m];

esf[i_,j_]:=
Module[{v, w, arw},

v[p_, q_, f_]:= xy[[p]]+ f*(xy[[q]]-xy[[p]]);
arw[p_, q_, f_]:= If[$VersionNumber<6, 
Arrow[xy[[p]], v[p, q, f], HeadScaling-> Absolute, HeadLength-> 15], 
Arrow[{xy[[p]], v[p, q, f]}]
]; 

save$visdata["arrow", v[i,j, 0], v[i,j, 1]];

If[$VersionNumber<6, Return[

{Blue,Line[{i,j}],arw[i, j, .7]}]]; 

Return[{Blue,Line[{xy[[i]],xy[[j]]}],arw[i, j, .7]}]; 
];


vsf[i_]:=Module[{r, vdata},

vdata[p_]:=Module[{data,rawdata,d, center, r,ISAreaction,s, oval, ovaldisk,rx},

data= v[[p]];


ISAreaction=False;
If[StringPosition[data,"$"]=={{1,1}}, 
data = StringDrop[data,1];
ISAreaction=True;
];

rawdata = data;
data = MyStyleForm[data,FontFamily-> vis$fontFamily, FontSize-> vis$fontSize];




d={};
center = xy[[p]];

If[$VersionNumber<6, 
data =Text[data, i], 
data=Text[data, center]
]; 


If[ISAreaction,
r=Rectangle[center-vis$box, center+vis$box];
s=Line[{
center+{vis$boxWidth/2, vis$boxHeight/2},
center+{vis$boxWidth/2, -vis$boxHeight/2},
center+{-vis$boxWidth/2, -vis$boxHeight/2},
center+{-vis$boxWidth/2, vis$boxHeight/2},
center+{vis$boxWidth/2, vis$boxHeight/2}
}];
d=Join[d,{White,  r, Black, s}];

save$visdata["reaction", rawdata, center];
,
rx=StringLength[v[[p]]];
oval = Circle[center, vis$radius*{rx, 1}]; 
ovaldisk = Disk[center, vis$radius*{rx, 1}]; 
d = Join[d, { White, ovaldisk,Red, oval, Black}];

save$visdata["species", rawdata, center];

]; 

d=Append[d, data];


Return[d];
]; 


r= vdata[i];
Return[r];

];
 
With[{opt=MyFilterOptions[GraphPlot, options]}, 
If[dbg, Print["visualizeSBMLModel: about to call GraphPlot\nm=",m,"\n{opt}=", {opt}, "\nesf=", esf, "\nvsf=", vsf, "\nxy=", xy]]; 
plotlabel= MyStyleForm[title, FontFamily-> vis$fontFamily, FontSize-> vis$headerFontSize]; 
If[$VersionNumber<6, 
v=GraphPlot[m,opt, 
 EdgeStyleFunction-> esf,
VertexStyleFunction->vsf, VertexCoordinates-> xy, PlotLabel-> plotlabel ]; 
, 
erf[{pt1_, pt2_}, u___]:= Module[{i, j, w},
i=Position[xy, pt1]//Flatten//First; 
j=Position[xy, pt2]//Flatten//First;
w=esf[i,j]; 
w=Prepend[w, Arrowheads[Medium]]; 
If[dbg, Print["{i,j}=", {i,j}, " erf=", w, Graphics[w]]]; 
Return[w]; 
]; 
erferr=True; 
erf[u___]:= Module[{}, 
If[erferr, Print["Warning: "//boldRed,"visualizeSBMLModel: "//boldBlue,  " unexpected input to EdgeRenderingFunction: "//boldBlack, u//boldBlue, "\nThis error occurs because of undocumented improvements in Mathematica 6.0 that have erroneously superceded EdgeStyleFunction with EdgeRenderingFunction without backward compatibility or change documentation. IN most cases this error will not affect the output of visualizeSBMLModel, and it is not clear why Mathematica generates this function call. There is currently no workaround for this bug, escept to run MathSBML in Mathematica 5.2. This message will be suppressed for the remainder of this calculation. "//boldBlack]]; 
erferr=False; 
Return[{}];];  

vrf[pos_, u___]:= Module[{i},
i=Position[xy, pos]//Flatten//First; 
Return[vsf[i]]; 
]; 

v=GraphPlot[m, opt,VertexCoordinateRules-> xy , PlotLabel-> plotlabel, 
 EdgeRenderingFunction->( erf[#]&), 
 VertexRenderingFunction-> vrf  ]; 

];
Return[v]
];
]; 

Return[vis[r]];
]; 


LTPrint["Visualization loaded."]
