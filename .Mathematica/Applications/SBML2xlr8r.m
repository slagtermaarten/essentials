(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)











If[$VersionNumber< 5.1, Print[
      "Error: You must have Mathematica Version 5.1 or higher to use the SBML2xlr8r package. You are currently using version ",\
 $VersionNumber
      ];
    Abort[];
    ];

BeginPackage["SBML2xlr8r`"];





(* turn off message writing - 
    don't echo a message if you have to load mathsbml or xlr8r *) 

If[Length[Names["FLAGS`ECHOLOAD"]]>0,
      saveflag=ToExpression["FLAGS`ECHOLOAD"],
      saveflag=True;
      ];
  FLAGS`ECHOLOAD=False;
  
  (* Load mathsbml if it is not already in memory *)
  
  If[Length[Names["MathSBML`$MathSBML$Version"]]\[Equal]0,
      <<mathsbml.m;
      ]; 
  
  (* Load xlr8r if it is not already in memory *)
  
  If[Length[Names["xlr8r`$xlr8r$Version"]]\[Equal]0,
      <<xlr8r.m;
      ];
  
  (* Put package-load echoing back into its previous mode *)
  
  FLAGS`ECHOLOAD=saveflag;
  
  (* clean up *)
  
  Remove[saveflag];
  
  (* set a flag to indicate whether or not some version of this package has \
already been loaded. 
        This flag will again be checked at the very end of loading the \
package *)
  
  versions=Names["SBML2xlr8rVersion"];
  
  Off[TEMP$OLDVERSION::"shdw"];
  Off[TEMP$FIRST::"shdw"];
  If[Length[versions]>0,
      TEMP$OLDVERSION=SBML2xlr8rVersion; 
      TEMP$FIRST=False;,
      TEMP$FIRST=True];
  Remove[versions];
  
  (* THE FOLLOWING FLAG SHOULD UNIQUELY IDENTIFY THIS S/
        W VERSION AND SHOULD BE CHANGED EACH TIME THE PROGRAM IS MODIFIED *)
 \
  
  SBML2xlr8rVersion="0.2 alpha (23 September 2006)";
  
  







xCelleratorNetwork::usage="";
xCelleratorRates::usage="";
xCelleratorIC::usage="";
SBML2xlr8r::usage=
    "SBML2xlr8r[filename,options] converts an SBML model to an internal cellerator model. At the present time, only simple mass action reactions are recognized. Any reaction that is not simple mass action is converted to a User-defined reaction arrow. \nAny option for MathSBML`SBMLRead may be used (such as context\[Rule]None).\nThe return value has the form:\n{xCelleratorNetwork\[Rule]i, xCelleratorIC\[Rule]ic, xCelleratorRates\[Rule]r}\n\n"<>
      "Typical Usage:\n\n"<>"\tm=SML2xlr8r[filename];\n"<>"\tnet=xCelleratorNetwork/.m;\n"<>
      "\tic=xCelleratorRates/.m;\n"<>"\tr=xCelleratorRates/.m;\n"<>"\ti=interpret[net]/.r;\n"<>
      "\tsim=run[i, initialConditions\[Rule]ic, rates\[Rule]r];\n"<>"\trunPlot[sim]";



Begin["`Private`"];



bb[x___]:=MathSBML`Private`boldBlue[x];
bl[x___]:=MathSBML`Private`boldBlue[x];
bk[x___]:=MathSBML`Private`boldBlack[x];
bbk[x___]:=MathSBML`Private`boldBlack[x];
br[x___]:=MathSBML`Private`boldRed[x];



globalrules={}; 

SBML2xlr8r[file_, opt___?OptionQ]:= Module[{m,version,f,
        nf,u, nu,c, nc,ct, nct,ns, species, st, nst,ia, 
        nia, con, ncon, r, nr, algrules, nalgrules, assrules, nassrules, ev, 
        nev, p, np, mid, kl, nkl, constants,
        network, ic,
        evvars
        },
      
      (* import the file *)
      
      If[!MathSBML`Private`fileExists[file],
        Print["Error: "//br, "SBML2xlr8r: file not found:"//bbk, file//bb];
        Return[{}];
        ];
      m=MathSBML`SBMLRead[file, Global`evaluateParameters\[Rule] False,
          Global`return\[Rule] {Global`SBMLKineticLaws\[Rule] True}, opt];
      
      (* acquire the data *) 
      
      mid = 
        Global`SBMLModelid/.m/.{Global`SBMLModelid   \[Rule] Indeterminate}; 
      
      version=
        Global`SBMLLevelVersion/.m/.{Global`SBMLLevelVersion\[Rule] 
              Indeterminate};
      f=Global`SBMLFunctions/.m/.{Global`SBMLFunctions\[Rule] {}};
      nf=Length[f];
      
      c=Global`SBMLCompartments/.m/.{Global`SBMLCompartments\[Rule] {}};
      nc=Length[c];
      constants = Global`SBMLConstants/.m/.{Global`SBMLConstants\[Rule] {}}; 
      
      globalrules=constants;
      
      ct=Global`SBMLCompartmentTypes/.m/.{Global`SBMLCompartmentTypes\[Rule] \
{}};
      nct=Length[ct];
      st=Global`SBMLSpeciesTypes/.m/.{GLobal`SBMLSpeciesTypes\[Rule] {}};
      nst= Length[st];
      species = 
        First/@(Global`SBMLSpeciesCompartmentAssociations/.m/.Global`\
SBMLSpeciesComparatmentAssociations\[Rule] {});
      ns= Length[species];
      p=Global`SBMLParameters/.m/.{Global`SBMLParameters\[Rule] {}}; 
      np=Length[p];
      ia=Global`SBMLInitialAssignments/.m/.{Global`SBMLInitialAssignments\
\[Rule] {}};
      nia = Length[nia];
      con=Global`SBMLConstraints/.m/.{Global`SBMLConstraints\[Rule] {}};
      ncon=Length[con];
      r= Global`SBMLReactions/.m/.{Global`SBMLReactions\[Rule] {}};
      nr=Length[r];
      algrules=
        Global`SBMLAlgebraicRules/.m/.{Global`SBMLAlgebraicRules\[Rule] {}};
      nalgrules=Length[algrules];
      assrules=
        Global`SBMLAssignmentRules/.m/.{Global`SBMLAssignmentRUles\[Rule] \
{}};
      nassrules=Length[assrules];
      
      assrules = assrules/.{Equal\[Rule] Rule}; 
      globalrules = Join[assrules, globalrules];
      
      
      ev= Global`SBMLEvents/.m/.{Global`SBMLEvents\[Rule] {}};
      nev=Length[ev];
      
      Switch[version,
        2.1,
        Print["Model: "//bk, mid//bl," is SBML Level 2 Version 1"//bk];
        (* Print[ nf, " functions\n", nc, " compartments\n",  ns, 
            " species\n", np, " parameters\n", nr," reactions\n", nalgrules,
            " algebraic rules\n", nassrules," assignment rules\n", nev, 
            " events."
            ]*)
        ,
        2.2,
        Print["Model: "//bk, mid//bl, " SBML Level 2 Version 2"//bk];
        (* Print[ nf, " functions\n", nct, " compartment Types\n",nc, 
            " compartments\n", nst, " speciesTypes\n", ns, " species\n", np, 
            " parameters\n", nia, " initial assgnments\n", ncon, 
            " constraints\n", nr," reactions\n", nalgrules,
            " algebraic rules\n", nassrules," assignment rules\n", nev, 
            " events."
            
            ]*)
        ,
        _,
        Print["Warning: "//br, "Model: "//bk,mid//bl, 
          " has SBML Level.Version "//bk, version//bl, 
          " which is not supported by SBML2xlr8r. "//bk];
        Return[{}]; 
        ];
      
      (* CHECK FOR FUNCTIONS *) 
      
       If[nf>0, 
        Print["Warning: "//br, "SBML2xlr8r: model "//bk, mid//bl, 
          " contains function definitions, which are not currently supported, and will be ignored."//
            bk]]; 
      
      (* CHECK FOR EVENTS *) 
      
      If[nev>0,  
        evvars = Last/@ev;
        evvars = ("events"/.#)&/@evvars;
        evvars=Flatten[evvars];
        evvars = First/@ToExpression/@evvars;
        evvars = MathSBML`Private`defunctionate/@evvars;
        evvars=Union[evvars];
        
        Print["Warning: "//br, "SBML2xlr8r: The variable "//bk,
              #//bl, " is modified by an event. "//bk, 
              "Events are not supported by this version of SBML2xlr8r. Any subsequent attempt to run a simulation will produces errors."//
                bl, "The values of xCelleratorRates and xCelleratorIC should be modified manually before executing a run command. "//
                bk 
              ]&/@evvars;
        
        ]; 
      
      (* CHECK FOR ALGEBRAIC RULES *)
      
      If[nalgrules>0, 
        Print["Warning: "//br, "SBML2xlr8r: model "//bk, mid//bl, 
          " contains algebraic rules, which are not currently supported, and will be ignored."//
            bk]]; 
      
      
      (* Check for consistency between reactions & kinetic laws *)
      
      kl = Global`SBMLKineticLaws/.m/.{Global1`SBMLKineticLaws\[Rule] {}};
      nkl=Length[kl];
      If[nkl \[NotEqual] kl, Print[
          "Error: "//br, 
          "SBML2xlr8r: the number of kineticLaws and the number of reactions are different. Unable to process this model. Please install a more recent version of MathSBML."//
            bk
          ]; 
        Return[{}]; 
        ];
      
      kl = Last/@(kl/.{Equal\[Rule] List}); 
      r=ToExpression/@r;
       r= r/.{Global`RightArrowLeftArrow\[Rule] Rule}; 
      
      
      network = MapThread[List[#1, #2]&, {r, kl}];
      network = network/.{Global`EmptySet\[Rule] Global`\[EmptySet]};
      network=network/.{
            
            ToExpression[MathSBML`Private`contextify["EmptySet"]]\[Rule] 
              Global`\[EmptySet]
            }; 
      
      ic = Global`SBMLIC/.m/.{Global`SBMLIC\[Rule] {}};
      ic = ic/.{Equal\[Rule] Rule};
      ic = Select[ic, !SameQ[Last[#], Indeterminate]&];
      ic = 
        Select[ic, 
          ToString[MathSBML`Private`decontextify[First[#]]]\[NotEqual] 
              "EmptySet[0]"&];
      ic = ToString/@ic;
      ic = StringReplace[#, "[0]"\[Rule] ""]&/@ic; 
      ic = ToExpression/@ic;
      
      network = identifyArrow/@network;
      
      
      globalrules= MapThread[Rule, {First/@globalrules,
            (Last/@globalrules)//.globalrules
            }];
      
      Return[{xCelleratorNetwork\[Rule] network,
          xCelleratorRates\[Rule] globalrules,
          xCelleratorIC\[Rule] ic
          }]
      ];





identifyArrow[{reaction_, klaw_}]:= Module[{r, k, dbg=False, reactants, 
        massactionlaw, massactionratio},
      
      mytimes[x_?NumberQ, y_]:= y^x;
      mytimes[y_, x_?NumberQ] := y^x; 
      mytimes[x___]:= Times[x]; 
      
      (* check for Mass Action *)
      
      r= reaction;
      k = klaw;
      k = MathSBML`Private`stringer[k];
      k = StringReplace[k, "[t]"\[Rule] ""]; 
      k = ToExpression[k];
      
      reactants = First[reaction]; 
      reactants = reactants/.{Plus\[Rule] List};
      If[!ListQ[reactants], reactants={reactants}]; 
      
      
      massactionlaw = Times@@(reactants/.{Times\[Rule] mytimes});
      massactionlaw= massactionlaw/.{Global`\[EmptySet]\[Rule] 1};
      massactionratio=k/massactionlaw;
      
      If[dbg, 
        Print["identifyArrow: reaction: ", r, " klaw: ", k]; 
        Print["reactants:", reactants];
        Print["massaction:", massactionlaw];
        Print["massactionratio:", massactionratio];
        ]; 
      
      If[NumberQ[massactionratio/.globalrules],
        If[dbg, Print["Mass Action Reaction"]];
        k=massactionratio;
        Return[{reaction, k}];
        ];
      
      (* the reaction is not mass action, 
        return back as a user reaction *)
      
      Return[{ (reaction)/.{Rule\[Rule] Implies}, klaw}]; 
      ];




now=MathSBML`Private`now[];
If[Length[Names["FLAGS`ECHOLOAD"]]>0,
    msgflag=ToExpression["FLAGS`ECHOLOAD"],
    msgflag=True;
    ];

If[msgflag,
    If[TEMP$FIRST \[Or] (!TEMP$FIRST \[And] !Equal[SBML2xlr8rVersion, 
                  TEMP$OLDVERSION]),
        Print[
            "SBML2xlr8r Version "<>SBML2xlr8rVersion<>
              " using Mathematica Version "<>$Version<>" loaded "<>now];,
        
        Print[
            "SBML2xlr8r Version "<>SBML2xlr8rVersion<>
              " using Mathematica Version "<>$Version<>" reloaded "<>now];
        
        ];
    ];
If[!TEMP$FIRST \[And] !Equal[SBML2xlr8rVersion, TEMP$OLDVERSION],Print[
      StyleForm[
        "SBML2xlr8r: warning: loading a different version of this package may cause unexpected results.\ncurrent version: "<>
          SBML2xlr8rVersion<>"\nprevious version:"<>TEMP$OLDVERSION,
        FontWeight\[Rule] Bold, FontColor\[Rule] Red]
      ]]; 


Remove[msgflag];

End[];

Remove[TEMP$OLDVERSION];
Remove[TEMP$FIRST];

EndPackage[];