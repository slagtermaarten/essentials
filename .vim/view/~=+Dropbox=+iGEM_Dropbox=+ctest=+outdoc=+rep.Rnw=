let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <silent> <S-F7> <Plug>Tex_FastCommandChange
imap <buffer> <silent> <F7> <Plug>Tex_FastCommandInsert
inoremap <buffer> <silent> <S-F3> =Tex_PutEnvironment("bmatrix")
inoremap <buffer> <silent> <S-F2> =Tex_PutEnvironment("eqnarray")
inoremap <buffer> <silent> <S-F1> =Tex_PutEnvironment("eqnarray*")
imap <buffer> <silent> <S-F5> <Plug>Tex_FastEnvironmentChange
imap <buffer> <silent> <F5> <Plug>Tex_FastEnvironmentInsert
nnoremap <buffer> <silent> \rf :call StartR("R")
nnoremap <buffer> <silent> \rv :call StartR("vanilla")
nnoremap <buffer> <silent> \rc :call StartR("custom")
nnoremap <buffer> <silent> \rq :call RQuit('nosave')
nnoremap <buffer> <silent> \rw :call RQuit('save')
nnoremap <buffer> <silent> \xx :call RComment("normal")
nnoremap <buffer> <silent> \; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> \rl :call SendCmdToR("ls()")
nnoremap <buffer> <silent> \rr :call RClearConsole()
nnoremap <buffer> <silent> \rm :call RClearAll()
nnoremap <buffer> <silent> \rp :call RAction("print")
nnoremap <buffer> <silent> \rn :call RAction("names")
nnoremap <buffer> <silent> \rt :call RAction("str")
nnoremap <buffer> <silent> \ra :call RAction("args")
nnoremap <buffer> <silent> \re :call RAction("example")
nnoremap <buffer> <silent> \rh :call RAction("help")
nnoremap <buffer> <silent> \rs :call RAction("summary")
nnoremap <buffer> <silent> \rg :call RAction("plot")
nnoremap <buffer> <silent> \rb :call RAction("plotsumm")
nnoremap <buffer> <silent> \ro :call RObjBrowser()
nnoremap <buffer> <silent> \r= :call RBrowserOpenCloseLists(1)
nnoremap <buffer> <silent> \r- :call RBrowserOpenCloseLists(0)
nnoremap <buffer> <silent> \rd :call RSetWD()
nnoremap <buffer> <silent> \sw :call RSweave(0)
nnoremap <buffer> <silent> \sp :call RMakePDF("nobib", 0)
nnoremap <buffer> <silent> \sb :call RMakePDF("bibtex", 0)
nnoremap <buffer> <silent> \kn :call RSweave(1)
nnoremap <buffer> <silent> \kp :call RMakePDF("nobib", 1)
nnoremap <buffer> <silent> \kb :call RMakePDF("bibtex", 1)
nnoremap <buffer> <silent> \si :call RnwToggleIndentSty()
noremap <buffer> <silent> \ca :call SendChunkToR("echo", "down")
noremap <buffer> <silent> \cd :call SendChunkToR("silent", "down")
noremap <buffer> <silent> \ce :call SendChunkToR("echo", "stay")
noremap <buffer> <silent> \cc :call SendChunkToR("silent", "stay")
vnoremap <buffer> <silent> \si :call RnwToggleIndentSty()
onoremap <buffer> <silent> \si :call RnwToggleIndentSty()
vnoremap <buffer> <silent> \kb :call RMakePDF("bibtex", 1)
onoremap <buffer> <silent> \kb :call RMakePDF("bibtex", 1)
vnoremap <buffer> <silent> \kp :call RMakePDF("nobib", 1)
onoremap <buffer> <silent> \kp :call RMakePDF("nobib", 1)
vnoremap <buffer> <silent> \kn :call RSweave(1)
onoremap <buffer> <silent> \kn :call RSweave(1)
vnoremap <buffer> <silent> \sb :call RMakePDF("bibtex", 0)
onoremap <buffer> <silent> \sb :call RMakePDF("bibtex", 0)
vnoremap <buffer> <silent> \sp :call RMakePDF("nobib", 0)
onoremap <buffer> <silent> \sp :call RMakePDF("nobib", 0)
vnoremap <buffer> <silent> \sw :call RSweave(0)
onoremap <buffer> <silent> \sw :call RSweave(0)
vnoremap <buffer> <silent> \rd :call RSetWD()
onoremap <buffer> <silent> \rd :call RSetWD()
vnoremap <buffer> <silent> \r- :call RBrowserOpenCloseLists(0)
onoremap <buffer> <silent> \r- :call RBrowserOpenCloseLists(0)
vnoremap <buffer> <silent> \r= :call RBrowserOpenCloseLists(1)
onoremap <buffer> <silent> \r= :call RBrowserOpenCloseLists(1)
vnoremap <buffer> <silent> \ro :call RObjBrowser()
onoremap <buffer> <silent> \ro :call RObjBrowser()
vnoremap <buffer> <silent> \rb :call RAction("plotsumm")
onoremap <buffer> <silent> \rb :call RAction("plotsumm")
vnoremap <buffer> <silent> \rg :call RAction("plot")
onoremap <buffer> <silent> \rg :call RAction("plot")
vnoremap <buffer> <silent> \rs :call RAction("summary")
onoremap <buffer> <silent> \rs :call RAction("summary")
vnoremap <buffer> <silent> \rh :call RAction("help")
onoremap <buffer> <silent> \rh :call RAction("help")
vnoremap <buffer> <silent> \re :call RAction("example")
onoremap <buffer> <silent> \re :call RAction("example")
vnoremap <buffer> <silent> \ra :call RAction("args")
onoremap <buffer> <silent> \ra :call RAction("args")
vnoremap <buffer> <silent> \rt :call RAction("str")
onoremap <buffer> <silent> \rt :call RAction("str")
vnoremap <buffer> <silent> \rn :call RAction("names")
onoremap <buffer> <silent> \rn :call RAction("names")
vnoremap <buffer> <silent> \rp :call RAction("print")
onoremap <buffer> <silent> \rp :call RAction("print")
vnoremap <buffer> <silent> \rm :call RClearAll()
onoremap <buffer> <silent> \rm :call RClearAll()
vnoremap <buffer> <silent> \rr :call RClearConsole()
onoremap <buffer> <silent> \rr :call RClearConsole()
vnoremap <buffer> <silent> \rl :call SendCmdToR("ls()")
onoremap <buffer> <silent> \rl :call SendCmdToR("ls()")
noremap <buffer> <silent> \d :call SendLineToR("down")0
noremap <buffer> <silent> \l :call SendLineToR("stay")0
noremap <buffer> <silent> \pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> \pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> \pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> \pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> \sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> \sd :call SendSelectionToR("silent", "down")
vnoremap <buffer> <silent> \se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> \ss :call SendSelectionToR("silent", "stay")
vnoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
noremap <buffer> <silent> \ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> \bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> \be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> \bb :call SendMBlockToR("silent", "stay")
vnoremap <buffer> <silent> \; :call MovePosRCodeComment("selection")
onoremap <buffer> <silent> \; :call MovePosRCodeComment("normal")
vnoremap <buffer> <silent> \xx :call RComment("selection")
onoremap <buffer> <silent> \xx :call RComment("normal")
vnoremap <buffer> <silent> \rw :call RQuit('save')
onoremap <buffer> <silent> \rw :call RQuit('save')
vnoremap <buffer> <silent> \rq :call RQuit('nosave')
onoremap <buffer> <silent> \rq :call RQuit('nosave')
vnoremap <buffer> <silent> \rc :call StartR("custom")
onoremap <buffer> <silent> \rc :call StartR("custom")
vnoremap <buffer> <silent> \rv :call StartR("vanilla")
onoremap <buffer> <silent> \rv :call StartR("vanilla")
vnoremap <buffer> <silent> \rf :call StartR("R")
onoremap <buffer> <silent> \rf :call StartR("R")
nnoremap <buffer> \ls :call Tex_ForwardSearchLaTeX()
nnoremap <buffer> \lv :call ViewLaTeX()
vnoremap <buffer> \ll :call Tex_PartCompile()
nnoremap <buffer> \ll :call RunLaTeX()
nmap <buffer> <silent> gN :call RnwPreviousChunk()
nmap <buffer> <silent> gn :call RnwNextChunk()
vmap <buffer> <silent> <F7> <Plug>Tex_FastCommandInsert
nmap <buffer> <silent> <S-F7> <Plug>Tex_FastCommandChange
nmap <buffer> <silent> <F7> <Plug>Tex_FastCommandInsert
vmap <buffer> <silent> <F5> <Plug>Tex_FastEnvironmentInsert
nmap <buffer> <silent> <S-F5> <Plug>Tex_FastEnvironmentChange
nmap <buffer> <silent> <F5> <Plug>Tex_FastEnvironmentInsert
imap <buffer> <silent>  =RCompleteArgs()
imap <buffer> <silent> < :call RWriteChunk()a
inoremap <buffer> <silent> \ca :call SendChunkToR("echo", "down")a
inoremap <buffer> <silent> \cd :call SendChunkToR("silent", "down")a
inoremap <buffer> <silent> \ce :call SendChunkToR("echo", "stay")a
inoremap <buffer> <silent> \cc :call SendChunkToR("silent", "stay")a
inoremap <buffer> <silent> \si :call RnwToggleIndentSty()a
inoremap <buffer> <silent> \kb :call RMakePDF("bibtex", 1)a
inoremap <buffer> <silent> \kp :call RMakePDF("nobib", 1)a
inoremap <buffer> <silent> \kn :call RSweave(1)a
inoremap <buffer> <silent> \sb :call RMakePDF("bibtex", 0)a
inoremap <buffer> <silent> \sp :call RMakePDF("nobib", 0)a
inoremap <buffer> <silent> \sw :call RSweave(0)a
inoremap <buffer> <silent> \rd :call RSetWD()a
inoremap <buffer> <silent> \r- :call RBrowserOpenCloseLists(0)a
inoremap <buffer> <silent> \r= :call RBrowserOpenCloseLists(1)a
inoremap <buffer> <silent> \ro :call RObjBrowser()a
inoremap <buffer> <silent> \rb :call RAction("plotsumm")a
inoremap <buffer> <silent> \rg :call RAction("plot")a
inoremap <buffer> <silent> \rs :call RAction("summary")a
inoremap <buffer> <silent> \rh :call RAction("help")a
inoremap <buffer> <silent> \re :call RAction("example")a
inoremap <buffer> <silent> \ra :call RAction("args")a
inoremap <buffer> <silent> \rt :call RAction("str")a
inoremap <buffer> <silent> \rn :call RAction("names")a
inoremap <buffer> <silent> \rp :call RAction("print")a
inoremap <buffer> <silent> \rm :call RClearAll()a
inoremap <buffer> <silent> \rr :call RClearConsole()a
inoremap <buffer> <silent> \rl :call SendCmdToR("ls()")a
inoremap <buffer> <silent> \q :call SendLineToR("newline")a
inoremap <buffer> <silent> \d :call SendLineToR("down")0i
inoremap <buffer> <silent> \l :call SendLineToR("stay")0i
inoremap <buffer> <silent> \pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> \pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> \pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> \pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> \ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> \bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> \be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> \bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> \; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> \xx :call RComment("normal")a
inoremap <buffer> <silent> \rw :call RQuit('save')a
inoremap <buffer> <silent> \rq :call RQuit('nosave')a
inoremap <buffer> <silent> \rc :call StartR("custom")a
inoremap <buffer> <silent> \rv :call StartR("vanilla")a
inoremap <buffer> <silent> \rf :call StartR("R")a
imap <buffer> <silent> _ :call ReplaceUnderS()a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=~/Dropbox/essentials/.vim/bundle/LaTeX-Suite-aka-Vim-LaTeX/ftplugin/latex-suite/dictionaries/dictionary
setlocal nodiff
setlocal equalprg=
setlocal errorformat=%-G%.%#Underfull%.%#,%-G%.%#Overfull%.%#,%-G%.%#specifier\ changed\ to%.%#,%-G%.%#You\ have\ requested%.%#,%-G%.%#Missing\ number%\\,\ treated\ as\ zero.%.%#,%-G%.%#There\ were\ undefined\ references%.%#,%-G%.%#Citation\ %.%#\ undefined%.%#,%E!\ LaTeX\ %trror:\ %m,%E!\ %m,%+WLaTeX\ %.%#Warning:\ %.%#line\ %l%.%#,%+W%.%#\ at\ lines\ %l--%*\\d,%+WLaTeX\ %.%#Warning:\ %m,%-Cl.%l\ %m,%-C\ \ %m,%-C%.%#-%.%#,%-C%.%#[]%.%#,%-C[]%.%#,%-C%.%#%[{}\\]%.%#,%-C<%.%#>%m,%-GSee\ the\ LaTeX%m,%-GType\ \ H\ <return>%m,%-G\ ...%.%#,%-G%.%#\ (C)\ %.%#,%-G(see\ the\ transcript%.%#),%-G\\s%#,%-O(%*[^()])%r,%-P(%f%r,%-P\ %\\=(%f%r,%-P%*[^()](%f%r,%-P(%f%*[^()],%-P[%\\d%[^()]%#(%f%r,%-P%*[^()],%-Q)%r,%-Q%*[^()])%r,%-Q[%\\d%*[^()])%r,%-Q%*[^()],%-G%.%#
setlocal expandtab
if &filetype != 'rnoweb'
setlocal filetype=rnoweb
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=TexFoldTextFunction()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRnowebIndent()
setlocal indentkeys=0{,0},!^F,o,O,e,},=bibitem,=item
setlocal noinfercase
setlocal iskeyword=@,48-57,_,.
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=latex\ -interaction=nonstopmode\ $*
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=rcomplete#CompleteR
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'rnoweb'
setlocal syntax=rnoweb
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 11 - ((0 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
11
normal! 0
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
